name: Update Clone Counter

on:
  schedule:
    - cron: '5 0 * * *'
  workflow_dispatch:

jobs:
  update-clones:
    runs-on: ubuntu-latest
    permissions:
      actions: write     # for gists
      contents: read     # if you need checkout

    steps:
      - name: Fetch last 14-day clone stats
        id: stats
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.CLONE_STATS_TOKEN }}
          script: |
            const core = require('@actions/core');
            const { data } = await github.rest.repos.getClones({
              owner: context.repo.owner,
              repo:  context.repo.repo,
              per:   'day'
            });

            console.log('🧐 API response:', JSON.stringify(data, null, 2));
            if (!Array.isArray(data.clones)) {
              throw new Error(`Expected data.clones array but got: ${JSON.stringify(data)}`);
            }
            const newClones = data.clones.reduce((sum, day) => sum + (day.count || 0), 0);
            console.log('➕ New clones in last 14 days:', newClones);
            core.setOutput('newClones', String(newClones));
            return newClones;

      - name: Update Gist total
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.CLONE_STATS_TOKEN }}
          script: |
            const gistId = 'fc9283f4379c4b0b6211de82d01e2cec';
            const added  = Number(core.getInput('newClones'));

            // fetch & parse
            const { data: gist } = await github.rest.gists.get({ gist_id: gistId });
            const fileName = Object.keys(gist.files)[0];
            const rawUrl   = gist.files[fileName].raw_url;
            const json     = await (await fetch(rawUrl)).json();

            // bump & patch
            json.message = String(Number(json.message) + added);
            await github.rest.gists.update({
              gist_id: gistId,
              files: { [fileName]: { content: JSON.stringify(json, null, 2) } }
            });
