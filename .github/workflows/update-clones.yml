# .github/workflows/update-clones.yml
name: Update Clone Counter

on:
  schedule:
    - cron: '5 0 * * *'
  workflow_dispatch:

jobs:
  update-clones:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch 14-day clone stats
        id: fetch
        env:
          GH_TOKEN: ${{ secrets.CLONE_STATS_TOKEN }}
        run: |
          resp=$(
            curl -s -H "Authorization: token $GH_TOKEN" \
              "https://api.github.com/repos/${GITHUB_REPOSITORY}/traffic/clones?per=day"
          )
          windowTotal=$(echo "$resp" | jq '.count // 0')
          echo "windowTotal=$windowTotal" >> $GITHUB_OUTPUT

      - name: Read & update Gist lifetime
        env:
          GH_TOKEN:   ${{ secrets.CLONE_STATS_TOKEN }}
          GIST_ID:    fc9283f4379c4b0b6211de82d01e2cec
          WINDOW:     ${{ steps.fetch.outputs.windowTotal }}
        run: |
          # 1. Load current gist
          meta=$(curl -s -H "Authorization: token $GH_TOKEN" \
            "https://api.github.com/gists/$GIST_ID")
          raw_url=$(echo "$meta" | jq -r '.files|keys[0] as $k|.[$k].raw_url')
          data=$(curl -s "$raw_url")

          # 2. Extract old values (if any)
          oldLife=$(echo "$data" | jq -r '.message // "0"')
          prevWin=$(echo "$data" | jq -r '.lastCount // empty')
          echo "üîç prevLife=$oldLife, prevWindow=$prevWin"

          # 3. Decide initialization vs. delta
          if [ -z "$prevWin" ]; then
            # first run: seed both
            newLife=$WINDOW
            newPrev=$WINDOW
            echo "üõ† first run ‚Äì seeding to $WINDOW"
          else
            diff=$((WINDOW - prevWin))
            [ $diff -lt 0 ] && diff=0
            newLife=$((oldLife + diff))
            newPrev=$WINDOW
            echo "‚ûï diff=$diff ‚Üí newLife=$newLife"
          fi

          # 4. Patch JSON
          patched=$(jq \
            --arg m "$newLife" \
            --arg l "$newPrev" \
            '.message = $m | .lastCount = $l' \
            <<<"$data")

          # 5. Push update
          file=$(echo "$meta" | jq -r '.files|keys[0]')
          payload=$(jq -n --arg f "$file" --arg c "$patched" '{"files":{($f):{"content":$c}}}')
          curl -s -X PATCH \
            -H "Authorization: token $GH_TOKEN" \
            -d "$payload" \
            "https://api.github.com/gists/$GIST_ID" \
            | jq .

      - name: Output badge URL
        env:
          GIST_ID: fc9283f4379c4b0b6211de82d01e2cec
        run: |
          echo "![Clones](https://img.shields.io/endpoint?url=https://gist.githubusercontent.com/${GITHUB_ACTOR}/${GIST_ID}/raw/clones.json)"

