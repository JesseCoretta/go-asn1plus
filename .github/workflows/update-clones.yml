# .github/workflows/update-clones.yml
name: Update Clone Counter

on:
  schedule:
    - cron: '5 0 * * *'
  workflow_dispatch:

jobs:
  update-clones:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch last 14-day clone stats
        id: fetch
        env:
          GH_TOKEN: ${{ secrets.CLONE_STATS_TOKEN }}
        run: |
          # 1. Grab the raw JSON from GitHub API
          resp=$(
            curl -s -H "Authorization: token $GH_TOKEN" \
                 "https://api.github.com/repos/${{ github.repository }}/traffic/clones?per=day"
          )
          echo "🧐 API response:"
          echo "$resp" | jq

          # 2. Sum up `.clones[].count`
          newClones=$(echo "$resp" | jq '[.clones[].count] | add // 0')
          echo "➕ New clones in last 14 days: $newClones"

          # 3. Expose for next step
          echo "newClones=$newClones" >> $GITHUB_OUTPUT

      - name: Read & update Gist total
        id: update_gist
        env:
          GH_TOKEN:   ${{ secrets.CLONE_STATS_TOKEN }}
          GIST_ID:    fc9283f4379c4b0b6211de82d01e2cec
          NEW_CLONES: ${{ steps.fetch.outputs.newClones }}
        run: |
          echo "🔍 Fetching gist metadata for ID $GIST_ID"
          resp=$(curl -s -H "Authorization: token $GH_TOKEN" "https://api.github.com/gists/$GIST_ID")
          echo "📝 Gist metadata response:"
          echo "$resp" | jq .
      
          # Extract raw_url of the first file
          raw_url=$(echo "$resp" | jq -r '.files | keys[0] as $k | .[$k].raw_url // empty')
          if [ -z "$raw_url" ]; then
            echo "❌ Could not find raw_url in gist metadata"
            exit 1
          fi
          echo "🔗 raw_url: $raw_url"
      
          # Download gist JSON
          data=$(curl -s "$raw_url")
          echo "📝 Current gist file content:"
          echo "$data" | jq .
      
          # Continue with updating
          old=$(echo "$data" | jq -r '.message')
          new=$((old + NEW_CLONES))
          echo "📝 Old total: $old → New total: $new"
      
          patched=$(echo "$data" | jq --arg m "$new" '.message = $m')
          echo "📝 Patched content:"
          echo "$patched" | jq .
      
          # Push the patch
          update_resp=$(curl -s -X PATCH \
            -H "Authorization: token $GH_TOKEN" \
            -d "{\"files\": {\"$(echo "$resp" | jq -r '.files|keys[0]')\": {\"content\": $(printf '%s' "$patched" | jq -Rs .)}}}" \
            "https://api.github.com/gists/$GIST_ID")
          echo "✅ Update response:"
          echo "$update_resp" | jq .


      - name: Show badge URL
        run: |
          echo "Use this in your README:"
          echo "![Clones](https://img.shields.io/endpoint?url=https://gist.githubusercontent.com/${{ github.actor }}/$GIST_ID/raw/clones.json)"
